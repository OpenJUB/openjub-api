#!/usr/bin/env node

var program = require('commander');
var mongoose = require('mongoose');
var colors = require('colors');
var ldapjs = require('ldapjs');
var prompt = require('prompt');
var inquirer = require('inquirer');
var ldap = ldapjs.createClient({url:'ldap://jacobs.jacobs-university.de'});
var modelImport = require('../lib/models');
var pkg = require('../package');
var settings = require('../settings');

program
  .version(pkg.version)
  .option('-d, --drop', 'Delete Old Records')
  .option('-u, --username [username]', 'Username')
  .option('-p, --password [password]', 'Password')
  .parse(process.argv);

var Models; // holds all models available

function setup (callback) {
  console.log('INFO'.cyan + ' Creating connection to database');

  mongoose.connect(settings.database)
  Models = modelImport(mongoose);

  console.log('OK'.green + ' Connection established');

  var user, password;

  var questions = [];

  if (program.username) {
    user = program.username;
  }
  else {
    questions.push({
      type: 'input',
      name: 'username',
      message: 'CampusNet username',
      validate: function (value) {
        var pass = value.length !== 0;
        if (pass) {
          return true;
        } else {
          return 'Please Enter a Username'
        }
      }
    });
  }

  if (program.password) {
    password = program.password;
  }
  else {
    questions.push({
      type: 'password',
      name: 'password',
      message: 'CampusNet password',
      validate: function (value) {
        var pass = value.length !== 0;
        if (pass) {
          return true;
        } else {
          return 'Please Enter a Password'
        }
      }
    });
  }

  inquirer.prompt(questions, function (answers) {
    user = user || answers.username;
    password = password || answers.password;

    ldap.bind(user+'@'+settings.ldap.host, password, function(err) {
      if (!(err === null)) {
        console.log('ERR'.red + " Couldn't login with the details provided");
        process.exit(-1);
      }

      callback();
    });

    return;

  });

};

function drop () {
  console.log('WARN'.yellow + ' Dropping all entries in the database');

  Models.Student.remove(function(err) {
    if (!(err === null)) {
      console.log('ERR'.red + ' Failed to remove the students. Error: ' + err);
    }
  });

  Models.Course.remove(function(err) {
    if (!(err === null)) {
      console.log('ERR'.red + ' Failed to remove the courses. Error: ' + err);
    }
  });

  console.log('OK'.green + ' All data dropped');
  return;
};

function update () {
  console.log('INFO'.cyan + ' Updating all entries in database');
  var studentsDone, coursesDone;

  getStudents(function(count, errors) {
    console.log('INFO'.cyan + ' Students retrieved (total: '+count +', errors: '+errors+')');
    studentsDone = 1;
    cleanup(studentsDone, coursesDone);
  });

  getCourses(function(count, errors) {
    console.log('INFO'.cyan + ' Courses retrieved (total: '+count+', errors:  '+errors+')');
    coursesDone = 1;
    cleanup(studentsDone, coursesDone);
  });

  return;
};

function cleanup(s,c) {
  if (!s || !c) {
    return;
  }

  console.log('OK'.green + ' All entries updated');
  ldap.unbind(function(err) {
    if (!(err === null)) {
      console.log('ERR'.red + " Couldn't unbind from LDAP (nothing will probably happen, but bad nonetheless)");
    }
  });

  process.exit();
};


function getStudents(callback) {

  var alphabet = "abcdefghijklmnopqrstuvwxyz";
  var for_count = 0;
  var count = 0;
  var errors = 0;
  for (var i = 0; i <= alphabet.length; i++) {
    var opts = {
      filter: '(sAMAccountName='+alphabet[i]+'*)',
      scope: 'sub'
    };

    ldap.search('OU=Users,OU=CampusNet,DC=jacobs,DC=jacobs-university,DC=de', opts, function(err,search) {

      if (!(err === null)) {
        console.log('ERR'.red + " Couldn't retrieve students from LDAP. Error: " + err);
      }

      search.on('searchEntry', function (entry) {
        var obj = parseStudent(entry.object);

        if (obj === null) {
          // happens a lot, annoying, do nothing instead :P
          //console.log('WARN'.yellow + " Student can't be parsed. Ignoring..");
          errors++;
          return;
        }

        count++;
        save_student(obj);
      });

      search.on('end', function(result) {
        if (++for_count == alphabet.length) {
          callback(count, errors);
        }
      });
    });
  }
};

function getCourses(callback) {

  var alphabet = "0123456789AJ";
  var for_count = 0;
  var count = 0;
  var errors = 0;
  for (var i = 0; i <= alphabet.length; i++) {
    var opts = {
      filter: '(CN=GS-CAMPUSNET-COURSE-'+alphabet[i]+'*)',
      scope: 'sub'
    };

    ldap.search('OU=Groups,OU=CampusNet,DC=jacobs,DC=jacobs-university,DC=de', opts, function(err,search) {

      if (!(err === null)) {
        console.log('ERR'.red + " Couldn't retrieve the courses from LDAP. Error: " + err);
      }

      search.on('searchEntry', function (entry) {
        var obj = parseCourse(entry.object);

        if (obj === null) {
          console.log('WARN'.yellow + " Course can't be parsed. Ignoring..");
          errors++;
          return;
        }

        count++;
        save_course(obj);
      });

      search.on('end', function(result) {
        if (++for_count == alphabet.length) {
          callback(count, errors);
        }
      });
    });
  }
};

function save_course(obj) {
  Models.Course.update({number: obj.number}, obj, {upsert: true}, function (err) {
    if (!(err === null)) {
      console.log('ERR'.red + ' Failed to update/insert the student with error: ' + err);
    }
  });
}

function save_student(obj) {
  Models.Student.update({username: obj.username}, obj, {upsert: true}, function (err) {
    if (!(err === null)) {
      console.log('ERR'.red + ' Failed to update/insert the student with error: ' + err);
    }
  });
}

function parseStudent(obj) {
  var result = {};

  var name = obj.displayName.split(", ");

  if (!name) {
    // No name, ignoring..
    return null;
  }

  result.firstName = name[1];
  result.lastName = name[0];
  result.fullName = result.firstName + ' ' + result.lastName;
  result.eid = obj.employeeID;
  result.username = obj.mailNickname;

  result.type = obj.employeeType;
  result.email = obj.mail;

  if (!result.username || !result.firstName || !result.lastName || !result.eid) {
    // Mandatory fields are missing!
    return null;
  }

  result.major = obj.extensionAttribute3;
  if (!result.major) {
      result.major = "";
  }

  result.country = obj.extensionAttribute5;
  if (!result.country) {
    result.country = "";
  }

  result.description = obj.extensionAttribute2;
  if (!result.description) {
    result.description = "";
  }

  return result;
};

function parseCourse(obj) {
  var result = {};

  var regex = /\(.+\)/;
  var matches = regex.exec(obj.description);

  if (!matches) {
    // Could not parse the name of the course, ignoring...
    return null;
  }

  var name = matches[0];
  name = name.slice(1,name.length-1);

  result.name = name;
  result.number = obj.displayName.replace("GS-CAMPUSNET-COURSE-","");

  return result;
}

(function main () {
  setup(function() {
    if (program.drop) {
      drop();
    }

    update();
  });
  return;
})();
