#!/usr/bin/env node

var program = require('commander');
var mongoose = require('mongoose');
var colors = require('colors');
var ldapjs = require('ldapjs');
var ldap = ldapjs.createClient({url:'ldap://jacobs.jacobs-university.de'});
var modelImport = require('../lib/models');
var pkg = require('../package');
var settings = require('../settings');

program
  .version(pkg.version)
  .option('-d, --drop', 'Delete Old Records')
  .parse(process.argv);

var Models; // holds all models available

function setup (callback) {
  console.log('INFO'.cyan + ' Create connection to database');

  mongoose.connect(settings.database)
  Models = modelImport(mongoose);

  console.log('OK'.green + ' Connection established');

  var user = "dcucleschi";
  var password = "";
  ldap.bind(user+'@'+settings.ldap.host, password, function(err) {
    if (!(err === null)) {
      // handle error
    }

    callback();
  });

  return;
};

function drop () {
  console.log('WARN'.yellow + ' Dropping all entries in the database');
  // drop
  console.log('OK'.green + ' All data dropped');

  return;
};

function update () {
  console.log('INFO'.cyan + ' Update all entries in database');
  
  getStudents();
  getCourses();

  //console.log('OK'.green + ' All entries updated');

  return;
};

function cleanup() {
  ldap.unbind(function(err) {
    if (!(err === null)) {
      // handle error
    }
  });
};


function getStudents() {

  var alphabet = "abcdefghijklmnopqrstuvwxyz";
  for (var i = 0; i <= alphabet.length; i++) {
    var opts = {
      filter: '(sAMAccountName='+alphabet[i]+'*)',
      scope: 'sub'
    };

    ldap.search('OU=Users,OU=CampusNet,DC=jacobs,DC=jacobs-university,DC=de', opts, function(err,search) {

      if (!(err === null)) {
        // handle error
      }

      search.on('searchEntry', function (entry) {
        // add to db
      });
    });
  }
}

function getCourses() {
  var opts = {
    filter: '(CN=GS-CAMPUSNET-COURSE-*)',
    scope: 'sub'
  };

  ldap.search('OU=Groups,OU=CampusNet,DC=jacobs,DC=jacobs-university,DC=de', opts, function(err,search) {

    if (!(err === null)) {
      // handle error
    }

    search.on('searchEntry', function (entry) {
      // add to db
      // (!!!) still fires Size Limit Exceeded!
    });
  }); 
}

(function main () {
  setup(function() {
    if (program.drop) {
      drop();
    }

    update();
    //cleanup();
  });
  return;
})();
